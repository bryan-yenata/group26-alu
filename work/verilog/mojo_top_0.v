/*
   This file was generated automatically by the Mojo IDE version B1.3.4.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  wire [24-1:0] M_adder_out;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [8-1:0] M_adder_a;
  reg [8-1:0] M_adder_b;
  reg [2-1:0] M_adder_slct;
  adder_2 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .slct(M_adder_slct),
    .out(M_adder_out),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [8-1:0] M_boolean_out;
  reg [8-1:0] M_boolean_a;
  reg [8-1:0] M_boolean_b;
  reg [3-1:0] M_boolean_slct;
  boolean_3 boolean (
    .a(M_boolean_a),
    .b(M_boolean_b),
    .slct(M_boolean_slct),
    .out(M_boolean_out)
  );
  
  wire [24-1:0] M_comparator_out;
  reg [8-1:0] M_comparator_a;
  reg [8-1:0] M_comparator_b;
  reg [2-1:0] M_comparator_slct;
  compare_4 comparator (
    .a(M_comparator_a),
    .b(M_comparator_b),
    .slct(M_comparator_slct),
    .out(M_comparator_out)
  );
  
  wire [8-1:0] M_shifter_out;
  reg [8-1:0] M_shifter_a;
  reg [8-1:0] M_shifter_b;
  reg [2-1:0] M_shifter_slct;
  shift_5 shifter (
    .a(M_shifter_a),
    .b(M_shifter_b),
    .slct(M_shifter_slct),
    .out(M_shifter_out)
  );
  
  reg [1:0] mslct;
  
  reg [23:0] result;
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    mslct = io_dip[16+6+1-:2];
    M_adder_a = io_dip[0+7-:8];
    M_adder_b = io_dip[8+7-:8];
    M_adder_slct = io_dip[16+0+1-:2];
    M_comparator_a = io_dip[0+7-:8];
    M_comparator_b = io_dip[8+7-:8];
    M_comparator_slct = io_dip[16+0+1-:2];
    M_boolean_a = io_dip[0+7-:8];
    M_boolean_b = io_dip[8+7-:8];
    M_boolean_slct = io_dip[16+0+2-:3];
    M_shifter_a = io_dip[0+7-:8];
    M_shifter_b = io_dip[8+7-:8];
    M_shifter_slct = io_dip[16+0+1-:2];
    
    case (mslct)
      2'h0: begin
        result = M_adder_out;
      end
      2'h1: begin
        result = M_comparator_out;
      end
      2'h2: begin
        result = M_boolean_out;
      end
      2'h3: begin
        result = M_shifter_out;
      end
      default: begin
        result = 3'h4;
      end
    endcase
    io_led = {result[16+7-:8], result[8+7-:8], result[0+7-:8]};
  end
endmodule
